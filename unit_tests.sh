#!/bin/sh

readonly M2S="./mysql2sqlite"

# define newline char as a constant
readonly NL='
'

# intermediary files generated by tests
readonly UT="./.unit_tests"
readonly SQL_DUMP="$UT/dump.sql"
readonly OUT_SCRIPT="$UT/dump.sqlite"
readonly OUT_DATABASE="$UT/db.sqlite"

mkdir -p -- "$UT"


# This function checks if given command is available on the system.
# It will terminate the script if command is not found.
assert_cmd_available() {
  type "$1" >/dev/null 2>&1 || {
    printf 'ERR command "%s" not available\n' "$1" >&2
    exit 1
  }
}

# This function creates a sqlite database using given sql script file.
# It converts SQL dump into sqlite script, and executes this script with sqlite3 to create a valid database file.
generate_db() {
  inputFile="$1"
  rm -- "$OUT_SCRIPT" 2> /dev/null
  rm -- "$OUT_DATABASE" 2> /dev/null
  "$M2S" "$inputFile" > "$OUT_SCRIPT"
  sqlite3 "$OUT_DATABASE" < "$OUT_SCRIPT"
}

# This function simply run the given query on given database
# It will print the result
# params: 
#     1. the SQL query (as string)
#     2. the .sqlite file to use as database for the query
#     3. strict mode (as boolean). When in stric mode, a trailing '_' will be added to result to avoid
#        trailing newlines to be truncated. It will be the caller's responsibility to remove this trailing underscore
#
query() {
  [ $# -eq 3 ] || printf 'USAGE: query <query> <dbfilename> <strict>\n'
  query="$1"
  db="$2"
  strict="$3"
  result="$(
	sqlite3 "$db" 2>&1 <<-END
		$query
	END
	if [ "$strict" = true ]; then 
		printf '_'
	fi
  )"
  printf "%s" "$result"
}

# This function will execute given query on given database, and compare the result of this query with given string
# It will print an error and terminate the script if the result does not match given string
# params: 
#     1. the SQL query (as string)
#     2. the expected result of the query (as string)
#     3. the .sqlite file to use as database for the query
#
assert_query() {
  [ $# -eq 3 ] || printf 'USAGE: assert_query <query> <expected> <dbfilename>\n'
  query="$1"
  expected="$2"
  db="$3"
  result="$(query "$query" "$db" true)"   # we need to use stric mode to avoid losing newlines at the end of text fields
  # remove trailing underscore and the last newline
  result=${result%_}
  result=${result%"$NL"}
  # compare expected value with retrieved value
  if [ "$result" != "$expected" ]; then
    printf '\nFAILURE:\n\tQuery failed on %s\n\t    query\t"%s"\n\t    expected\t"%s"\n\t    but got\t"%s"\n' "$db" "$query" "$expected" "$result" >&2
    exit 1
  fi
}

# This function dump the given hex string as binary in given file.
# params: 
#     1. the hexadecimal representation (as string)
#     2. the file to write (as string)
#
hexstr_to_file() {
  [ $# -eq 2 ] || printf 'USAGE: hexstr_to_file <hexstr> <filename>\n'
  hexstr="$1"
  filename="$2"
  escapedstr="$(
	sed 's/\(.\{2\}\)/\"\\\";\1;/g' <<-END
		$hexstr
	END
  )"
  result="$(
	bc <<-END | tr -d '\n'
		obase=8; ibase=16; $escapedstr
	END
  )"
  printf "$result" > "$2"
}

# ensure mandatory binaries are available
assert_cmd_available "$M2S"
assert_cmd_available sqlite3
assert_cmd_available bc
assert_cmd_available sed
assert_cmd_available md5sum
assert_cmd_available awk
assert_cmd_available base64

# ================= Data types conversion ===================
# No tests for Spatial and JSON data types, as they require an extension of Sqlite
cat <<\SQL > "$SQL_DUMP"
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `testdatetime` (
  `date` date NOT NULL,
  `time` time DEFAULT NULL,
  `datetime` datetime DEFAULT NULL,
  `timestamp` timestamp NULL DEFAULT NULL,
  `year` year(4) DEFAULT NULL,
  PRIMARY KEY (`date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;
INSERT INTO `testdatetime` VALUES ('2020-03-24','838:59:59','9999-12-31 23:59:59','2038-01-19 02:14:07',2155);
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `testmultirows` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `weight` tinyint(4) DEFAULT NULL,
  `picture` blob DEFAULT NULL,
  `base64picture` text DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;
INSERT INTO `testmultirows` VALUES (1,'Greg',125,0xiVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAIAAACQkWg2AAAEJHpUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHjazZdbluMoDIbfWcUswUKIy3K4njM7mOXPjwNKxXVJ0t0PbZctWQaB9AmcMv2/f4f5B4c97GGchOiT9wcOl1yyGUo8bsdN0uHO+3o4tvJgN/rCwsSQfHv0fbXPsMu9Q3DLXh7tJtTlJy5HpI7Pg+fIU1/t4nLE9man9WzS6pfdh3DWZetyu5xfn11AMprAH1tjOxMfuMc5Ct+ujItxt+zQiE6Lg8ywhq9zZ1S9JE+1S+6OvOz8mApz+NXAX3K07CQXO+sw9kptj/zwojYd4lPuxmhxjH6LLjuPTHmzgtqhnBoaFqSSz24eZ8Al0MN5JpwRIVYQa6BZcFZDiSyyOchRo0yD+ikrVUzR2W4DpLXV8mmLHGyylScCN08aNnDiZjiCTQU1htnqXOgcN53jVYoYuRFaWoIzQo9Pp/nK+CunOhpjli7RETVXmJedNY1pTHLzjlYAQmPlVM78nqf5UDfHB7AMgnKmOSLAfJSbiyJ0ry0+OTPayeHMcVsaFNpygBRhbMFkiEHg8MRCno5gbSBCHiP4ZMx8ln0BARKxjcwAG2YPONHOsdEn0NnWir2ZsbUAhLDnADSJM2A5J6if4CJqKAuLMyLiJUiUJNmzd16898HPPSoHDi5I8CGEGFLIkaOLEn0MMcYUc7KJsYVJ8imYFFNKOWPQDNcZvTNa5Fxs4eKKFF9CiSWVXFE+1VWpvoYaa6q52cYNy7/5FkyLLbXcqaOUuuvSfQ899tTzQK0NHm7I8COMONLISm1RfaRGF3I/U6NFbRJzZ7twpwZzCNsFze1EJjMQs45APEwCKGg7mR2RnLOT3GR2JItFIRbUSCacRpMYCLpOVgYpuzu5H7kZcW9xs9+RMxPdnyBnJrpF7jO3L6i1fH5R+AQ0V+HM6cEDGxsaZRvxh/3416X5XQd/uSPLy8I1+6kgoT3nrVW7tJ+kedbgVXk6Guz2lPTl8PkSAO1X8lWE5oUUWNLIpWu8OwfxlgLUUdehat09Stka766DNZMdi2epfr827+ZjaGRc1HMe2XwTTW3kBJ9kSmVK/DQLFUt+qS2p6ttNw8a2TK/KgN9Wa5Ay1N0wz7odaWuRtoMhZamHLFnNDhPLfwcsTyhy1RQ3BWqa60/Tq1WGLWtpzfvHZuaoSam6ruqdiHw3QN7h+ynNGXRjucS8JMV2h6apbWVbfdp5M7S7DO7b2IvmWsaLMM1T2lFn17S4uk7U7pems86YtXOjd6uLzLdld69ttWUNXnTborypNYVbmy7QEN7dJM212GLUdb9HHS5dNxQbd25y2WvNs6bQaRDl0xp4Ij/gx0dzD7LT7+urbqIu2hCHTmy8jQzSvNvhoxTlFL2u/ka/9y0xf+Zj9Jc6wm8e/Ids/geGjafyWut8CgAAAAlwSFlzAAAuIwAALiMBeKU/dgAAAAd0SU1FB+QDGAkpJZOfhrcAAAFISURBVCjPtVIxq4JgFP16iKOfEFLgEEjNUkMNjYL4J/R39Af8CyLN4eLqELm4VLg5RODiJD0IhQ+xBk1ug+/Zk9fjvYZ3pnuHc+8599wOAKBX8IZeRItwu90sywqC4K8EiqIwxrvdrm6fqu0AQFEUpmmOx+OyLLfbbZqm8/mcEOI4jmEYPM+3GAAAALqur9fr908QQqIoQgj5vg9tUDVtOByyLNvv95tBh8NBUZTpdIoQqqoqiqLRaPTwkGVZHMdfN3uep2laXadpqmlakiQPSYSQMAybvafTiWGYJElqh4vFIgiCliSMMca4Gb9cLm3b7na7ALBarQBAFMWPS34/3GazEQRBluXr9brf7yeTyfl8/jFp3/erqlJVtSiKy+UiSVKv12tl1VRlWR6Px8FgMJvNEEI0TXMc9yRB+A15nruu27Sdf//WO8B99i/AORo0AAAAAElFTkSuQmCC');
INSERT INTO `testmultirows` VALUES (2,'Mireille',52,0xiVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAAAAAA6mKC9AAAEFHpUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja3ZdRdsMoDEX/WcUsASGEYDnYwDmzg1n+PGwgrZ0003Z+ZuLGKIoQ4l2Znpj615/N/IGXsxSNF40hhWDx8sknl2FEe77Okaw/7uODncYnv1lfIK1ljHx+DHXEZ/jlMUH98G+f/Ub3kSeORDPzSMh9ZQdjxMWRiN3pp/HZpDEv+w/bGW/WI8UKvn72CjGKwMnOuMrEFvc+0fH5zngz7o49gujw+HFPz7Uzy7yIt6yLdjYPP3+WwtgwAsJFo+Enea7dodCF2lz50xf7tpa4addaia3Vc3fZBygVzNjU3MphIXCDlHxMC7gUb4Gtx5VwRWxxh+gFNDdcu6FEDmo28lQoU6N6jDvtKNG76hSjc7vjwxdZXXI7dwS+X9SccuJiOILNDmoMt1u10LFuOtbbKWLlQoh0hGSEGbfLPHP+5FqJWuutS2Tj0gp1ud6AKKOT63dEAQi1oakc+h6X+dA39gNYBkE5ZI7YYLbbmWITevQWH5wZcWK9sWe7k5aRABJhbUExxCBgA7FQIKvOKRF0jOCTUXlv+w0ESMQVMg1smAPgRNfXxhylI9aJO904WgBCOLACTeIMWN4L+kd9RA9lYfFGRIKoREmSAwcfJISgoZ9RWVm9igZVjZo0R44+SgxRY4wp5uQS4wiTFJKaFFNKOWPRjNQZszMict7cxpvfZAubbnFLW97RPrvfZQ+77nFPey6ucMHjX0JRU2JJJVeqaKXqq9RQtcaaam7otcbNN2mhaYsttbyoDaqfqdGF3NfUaFDrxPwRpw9qcKvOFNSPE+nMQMx5AnHtBNDQrjOzkbx3nVxnZpPDQyEO1Eg6nEKdGAj6Sk4aLXYPcl9yM+K/xc29Imc6un+DnOnoBrk7tyfUSj7+o/ABqD+FXVPLDQcbgrKL+MN5/PPR/DbBfyQRJS/k8Q89UB9xtlNsw4XOOQ3ZRjSOjD5C/JKyM2eGMqLoh2NQM5euOpcMoQyfuxksVyPrOc3gOZobkv2b2ri8yvBmm1n8/HYZcvOEm6HTMHVWXcq0lojvxsZL+GhmV9PEw3WEpRmfws3IN8NMq8YZVbfwppI4JzVanbM0WoXoQiU34wuKC3+YZWCLV5GvtJiXSpSGz6xe5HwpybbXHO+GuYHkYmdx26uGD2E1ENNsyEcl40tbryB9uhnb1TB+rroMlDa11PyW21zWPB55d9VmyfekovS6IklLpLXbFN729qLGcbY5hatY3+l6s6yaV5OX/A8ftnmGWE3GTpDevaX3pKB1SBr7UGaGbfzd8xFHoRl9FZaTy7Wg8rKgElcZhlYd7Vfntuk/rqbIq/92uh2mOqGUWSnrxwPDHLuY8v5i/J8mwi+LZgp+o5q/AUSwnGSJztw4AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH5AMYCSg5noXruQAAALBJREFUGNN9jzFKAwEURN9+d4PBqKCNKTQnECysvIFH8I6ewAuIXXoLQQWtEiOsSPJnvsVqoYXTzcAwb5rit+KPpwVAT6/rnaNpAE0By5tF141Gh+eTodJfv0iZ+Xb3OQS3q7IsZX8PAZu5bUuZ+ZwEvG/KlqTM9QctUFVurAglBOy15bItiTEB3VmVy5LyuCOAi/0q29b26TA7uZpW2T64HH+ToofHfvdktvWD/u/bL/YYZJk0OP13AAAAAElFTkSuQmCC');
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `testnumeric` (
  `tinyint` tinyint(4) NOT NULL,
  `smallint` smallint(6) DEFAULT NULL,
  `mediumint` mediumint(9) DEFAULT NULL,
  `int` int(11) DEFAULT NULL,
  `bigint` bigint(20) DEFAULT NULL,
  `decimal` decimal(20,2) DEFAULT NULL,
  `float` float DEFAULT NULL,
  `double` double DEFAULT NULL,
  `bit` bit(32) DEFAULT NULL,
  PRIMARY KEY (`tinyint`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;
INSERT INTO `testnumeric` VALUES (127,32767,8388607,2147483647,9223372036854775807,988888888888888889.99,-1.17549e-38,-2.2250738585072014e-308,0xFFFFFFFF);
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `teststring` (
  `char` char(1) NOT NULL,
  `varchar` varchar(45) DEFAULT NULL,
  `text` text DEFAULT NULL,
  `enum` enum('YES','NO','MAYBE') DEFAULT NULL,
  `set` set('a','b','c','d') DEFAULT NULL,
  `binary` binary(1) DEFAULT NULL,
  `varbinary` varbinary(45) DEFAULT NULL,
  `blob` blob DEFAULT NULL,
  PRIMARY KEY (`char`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;
INSERT INTO `teststring` VALUES ('Z','a varchar for test that can be 0x2D char long','text field content Lorem ipsum parabellum rectum et toutletoutim\n We can also add some quotes \' double quotes \'\' doublequote \" and double doublequote \"\"\n Why not some escape \\\' \\\'\' \\\" \\\"\"\n And some hexa 0xBAD\n\n Now its done\n','MAYBE','c',0x2B,0x61207661726368617220666F72207465737420746861742063616E20626520307832442063686172206C6F6E67,0x74657874206669656C6420636F6E74656E74204C6F72656D20697073756D207061726162656C6C756D2072656374756D20616E6420746F75746C65746F7574696D);
SQL
generate_db "$SQL_DUMP"

# numeric
assert_query "SELECT tinyint, smallint, mediumint, int, bigint FROM testnumeric;" \
             "127|32767|8388607|2147483647|9223372036854775807" \
             "$OUT_DATABASE"
assert_query "SELECT decimal, float, double FROM testnumeric;" \
             "988888888888888832|-1.17549e-38|-2.2250738585072e-308" \
             "$OUT_DATABASE"
assert_query "SELECT HEX(bit) FROM testnumeric;" \
             "FFFFFFFF" \
             "$OUT_DATABASE"

# datetime
assert_query "SELECT * FROM testdatetime;" \
             "2020-03-24|838:59:59|9999-12-31 23:59:59|2038-01-19 02:14:07|2155" \
             "$OUT_DATABASE"

# strings
assert_query "SELECT char, varchar, \`set\`, enum FROM teststring;" \
             "Z|a varchar for test that can be 0x2D char long|c|MAYBE" \
             "$OUT_DATABASE"
assert_query "SELECT text FROM teststring;" \
             "text field content Lorem ipsum parabellum rectum et toutletoutim$NL We can also add some quotes ' double quotes '' doublequote \" and double doublequote \"\"$NL Why not some escape \\' \\'' \\\" \\\"\"$NL And some hexa 0xBAD$NL$NL Now its done$NL" \
             "$OUT_DATABASE"
assert_query "SELECT HEX(binary), HEX(varbinary) FROM teststring;" \
             "2B|61207661726368617220666F72207465737420746861742063616E20626520307832442063686172206C6F6E67" \
             "$OUT_DATABASE"
assert_query "SELECT HEX(blob) FROM teststring;" \
             "74657874206669656C6420636F6E74656E74204C6F72656D20697073756D207061726162656C6C756D2072656374756D20616E6420746F75746C65746F7574696D" \
             "$OUT_DATABASE"

# Test mutiple inserts
assert_query "SELECT id, name, weight FROM testmultirows WHERE id=1;" \
             "1|Greg|125" \
             "$OUT_DATABASE"
assert_query "SELECT id, name, weight FROM testmultirows WHERE id=2;" \
             "2|Mireille|52" \
             "$OUT_DATABASE"

# Test that blobs and text in base64 format are not corrupted
# A picture was inserted into database as a binary blob, and the same picture was inserted as base64 text :
# data is retrieved from database, then dumped in 2 files (to ease debug in case of failure), and then
# files hash are compared to ensure that they are identical
i=1
while [ "$i" -le 2 ]; do
  out_picblob="$UT/test_picture_blob.png"
  picblob="$(query 'SELECT HEX(picture) FROM testmultirows WHERE id='$i';' $OUT_DATABASE false)"  # no need for strict mode because hex cannot contain \n
  hexstr_to_file "$picblob" "$out_picblob"
  md5blob="$(md5sum $out_picblob | awk '{ print $1 }')"

  out_picb64="$UT/test_picture_base64.png"
  picb64="$(query 'SELECT base64picture FROM testmultirows WHERE id='$i';' $OUT_DATABASE false)"  # no need for strict mode because base64 cannot contain \n
  printf "%s" "$picb64" | base64 -d > "$out_picb64"
  md5b64="$(md5sum $out_picb64 | awk '{ print $1 }')"

  # compare blob's md5 with md5 of empty file, then with md5 of base64 file
  if [ "$md5blob" = "d41d8cd98f00b204e9800998ecf8427e" ]; then
    printf '\nFAILURE:\n\tPicture %d was erased (BLOB is empty)\n' "$i" >&2
    exit 1
  fi
  if [ "$md5blob" != "$md5b64" ]; then
    printf '\nFAILURE:\n\tPicture %d got corrupted, either as BLOB or as base64 TEXT\n\t    picture from blob   dumped at  %s\n\t    picture from base64 dumped at  %s\n' "$i" "$OUT_picblob" "$OUT_picb64" >&2
    exit 1
  fi
  i=$(( i + 1 ))
done

# ================= Bit Fields ===================
cat <<\SQL > "$SQL_DUMP"
CREATE TABLE "bit_type" (
  "a" int(10) unsigned NOT NULL AUTO_INCREMENT,
  "b" bit(1) NOT NULL DEFAULT b'1',
  "c" bit(8) NOT NULL DEFAULT B'11111111',
  "d" BIT(4) NOT NULL DEFAULT b'1010',
  "e" BIT(4) NOT NULL DEFAULT B'00111111110000111'
);
SQL
generate_db "$SQL_DUMP"

# check that default blob values are correctly converted
query 'INSERT INTO bit_type (a) VALUES (NULL);' $OUT_DATABASE false
assert_query "SELECT a, HEX(b), HEX(c), HEX(d), HEX(e) FROM bit_type;" \
             "1|01|FF|0A|007F87" \
             "$OUT_DATABASE"


# FIXME
printf '\nERR Unit testing not yet fully implemented\n\n' >&2
exit 1

# Hex numbers with 15, 16, and 17 characters

cat <<\SQL
INSERT INTO `cache` (`cid`, `data`, `expire`, `created`, `headers`, `serialized`) VALUES
('ctools_plugin_files:ctools:style_bases', 0x613a313a7b733a3, 0, 1440573529, '', 1),
('ctools_plugin_files:ctools:content_types', 0xa343a226e6f64652, 0, 1440573529, '', 1);
INSERT INTO `cache` (`cid`, `data`, `expire`, `created`, `headers`, `serialized`) VALUES
('theme_registry:my_theme', 0x613a3234353a7b733, 0, 1440572933, '', 1);
SQL

# WARN Potential case sensitivity issues... for each line

# Bit Fields

cat <<\SQL
CREATE TABLE "bit_type" (
  "a" int(10) unsigned NOT NULL AUTO_INCREMENT,
  "b" bit(1) NOT NULL DEFAULT b'1',
  "c" bit(8) NOT NULL DEFAULT B'11111111',
  "d" BIT(4) NOT NULL DEFAULT b'1010',
  "e" BIT(4) NOT NULL DEFAULT B'00111111110000111',
  "f" int(10) unsigned NOT NULL AUTO_INCREMENT,
);
SQL

# big bit field num
# big bit field num with overflow
# big bit field num with potential overflow, but zeros

cat <<\SQL
CREATE TABLE "map" (
  "ID" int(10) NOT NULL,
  "f" int(11) NOT NULL,
  "direct" bit(1) NOT NULL DEFAULT 1,
  "t" int(11) NOT NULL
);
insert into "map" ("ID", "f", "t") values (5, 6, 7);
insert into "map" ("ID", "f", "direct", "t") values (55, 66, 99, 77);
SQL

cat <<\SQL
CREATE TABLE "map" (
  "ID" int(10) NOT NULL,
  "f" int(11) NOT NULL,
  "direct" bit(1) NOT NULL DEFAULT 199,
  "t" int(11) NOT NULL
);
insert into "map" ("ID", "f", "t") values (5, 6, 7);
insert into "map" ("ID", "f", "direct", "t") values (55, 66, 99, 77);
SQL

cat <<\SQL
DROP TABLE IF EXISTS `AAAA`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AAAA` (
  `id` bigint(10) NOT NULL AUTO_INCREMENT COMMENT 'PK.',
  `llll` varchar(10) NOT NULL COMMENT 'Some Comment',
  `rrrr` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Created date',
  `ssss` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT 'Modified Date. Some Comment',
  `tttt` varchar(1) DEFAULT 'A' COMMENT 'Some Comment',
  PRIMARY KEY (`id`),
  UNIQUE KEY `aaaa_pk` (`id`) COMMENT 'PK Index',
  KEY `bbbb_fk` (`bbbb`) COMMENT 'Index for FK, Reference Category',
  CONSTRAINT `bbbb_fk` FOREIGN KEY (`bbbb`) REFERENCES `category` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AAAA`
--

LOCK TABLES `AAAA` WRITE;
/*!40000 ALTER TABLE `AAAA` DISABLE KEYS */;
/*!40000 ALTER TABLE `AAAA` ENABLE KEYS */;
UNLOCK TABLES;
SQL

cat <<\SQL
/*!50100 PARTITION BY RANGE (YEAR(date))
(PARTITION p6 VALUES LESS THAN (2012) ENGINE = InnoDB,
 PARTITION p7 VALUES LESS THAN (2013) ENGINE = InnoDB)
SQL

cat <<\SQLin
CREATE TABLE `CCC`(
  `created` datetime DEFAULT current_timestamp(),
  `updated` datetime DEFAULT current_timestamp() ON UPDATE current_timestamp()
);
SQLin

cat <<\SQLout
PRAGMA synchronous = OFF;
PRAGMA journal_mode = MEMORY;
BEGIN TRANSACTION;
CREATE TABLE `CCC`(
  `created` datetime DEFAULT current_timestamp
,  `updated` datetime DEFAULT current_timestamp 
);
END TRANSACTION;
SQLout


cat <<\SQL
CREATE TABLE `scimag` (
  `ID` int(15) unsigned NOT NULL AUTO_INCREMENT,
  `DOI` varchar(200) NOT NULL,
  PRIMARY KEY (`ID`) USING BTREE,
  UNIQUE KEY `DOIUNIQUE` (`DOI`) USING BTREE,
);
SQL

cat <<\SQLin
CREATE TABLE `scimag` (
  `TEXTFIELD` text DEFAULT (_utf8mb3'text_value'),
);
SQLin

cat <<\SQLout
PRAGMA synchronous = OFF;
PRAGMA journal_mode = MEMORY;
BEGIN TRANSACTION;
CREATE TABLE `scimag` (
  `TEXTFIELD` text DEFAULT ('text_value')
);
END TRANSACTION;
SQLout
